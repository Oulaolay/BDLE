// octobre 2016


// BDLE, TME sur les la manipulation de données en Spark
// avec les Dataset

// lancer: spark-shell --driver-memory 10G


sc.setLogLevel("ERROR")









//===========
// FREEBASE
//===========


val freebaseFile = "/tmp/BDLE/dataset/freebase-projected-shorturls.txt"

case class Triple(sujet: String, prop: String, objet: String)


val TRIPLES = sc.textFile(freebaseFile).map(ligne => ligne.split("\t")).
  coalesce(32).map(tab => Triple(tab(0), tab(1), tab(2))).toDS()

TRIPLES.persist()
TRIPLES.count
// 32M de triples

TRIPLES.count



/* Q1
select ?b where {
 ?b <book.book.characters>   ?c .
 ?b <book.book.genre>        ?x .
 ?b <book.book.editions>     ?y }
 */


val t1 =

val t2 =

val t3 =

val Q1 =



/* Q2

 select ?c where {
  ?c people.person.education     ?e .
  ?c people.person.date_of_birth ?x .
  ?c people.person.nationality   ?y .
  FILTER ?x contains "1990"
}

*/

val t1 =

val t2 =

val t3 =

val Q2 =





//=====================================
// MOVIELENS : LES FILMS, USER, RATINGS
//======================================


val dataDir = "/tmp/BDLE/dataset/movielens"

//----------
// LES USERS
//----------

case class Utilisateur(numU:Int, genre:String, age: Int, profession: Int, ville: String)

val USERS = sc.textFile(dataDir + "/users.dat", 10).
  map( ligne => ligne.split("::") ).
  map(t => Utilisateur(t(0).toInt, t(1), t(2).toInt, t(3).toInt, t(4))).toDS()

USERS.persist()
USERS.count

USERS.take(3).foreach(println)



//----------
// LES FILMS
//----------

case class Film(numF:Int, titre:String, genre: Array[String]) {
  override def toString() = "(" + numF + ", " + titre + ", " + afficheGenres() + ")"
  def afficheGenres() = "(" + genre.mkString(",") + ")"
}

def parseFilm(ligne: String): Film = {
  val c = ligne.split("::")
  val numF = c(0).toInt
  val titre = c(1)
  val genres = c(2).split("\\|")
  return Film(numF, titre, genres)
}

// lecture des films en chargment en mémoire
val FILMS = sc.textFile(dataDir + "/movies.dat", 10).
  map( ligne => parseFilm(ligne)).toDS()

FILMS.persist()
FILMS.count
FILMS.take(3)
FILMS.take(3).foreach(println)


//----------------------------------------
// LES AVIS des utilisateurs sur les films
//----------------------------------------

case class Avis(numU: Int, numF: Int, note: Int, date: Long)

val AVIS = sc.textFile(dataDir + "/ratings.dat", 10).coalesce(32).
  map( ligne => ligne.split("::") ).
  map(t => Avis(t(0).toInt, t(1).toInt, t(2).toInt, t(3).toLong)).toDS()

AVIS.persist()
AVIS.count
AVIS.take(3).foreach(println)





//nombre de notes par utilisateur
val byUser = AVIS.groupBy("numU").count().sort($"count".desc)
byUser.take(10)
